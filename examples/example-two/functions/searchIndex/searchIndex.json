{
  "/blog/cuttlefish.html": " CUTTLEFISH ARE COOL!!!!!\ncuttlefish are cool!!!!!",
  "/blog/first.html": " MY FIRST POST\nMy first post",
  "/index.html": " ⊂◉‿◉つ\nLorem ipsum dolor sit amet, consectetur adipiscing elit.  * Go to Page Two [page-two]\n * Go to Page Three [page-three]",
  "/page-three.html": " NETLIFY DEV\n#WHAT-IS-NETLIFY-DEVWHAT IS NETLIFY DEV?\n#WATCH-THE-INTRODUCTION-24-MINUTESWATCH THE INTRODUCTION (24 MINUTES)\nlink to netlify dev talk\n[https://camo.githubusercontent.com/097afed57935a67f7ac5427751dc5e53072f78ac/68747470733a2f2f69332e7974696d672e636f6d2f76692f524c5f6774565a5f3739512f687164656661756c742e6a7067]\n[https://youtu.be/RL_gtVZ_79Q?t=812]Netlify Dev brings the power of Netlify's Edge Logic layer, serverless functions and add-on ecosystem to your local machine. It\nruns Netlify's production routing engine in a local dev server to make all redirects, proxy rules, function routes or add-on\nroutes available locally and injects the correct environment variables from your site environment, installed add-ons or your\nnetlify.toml file into your build and function environment.\n\n                            ┌───────────────┐\n                            │   Project     │\n                            │               │\n                            └localhost:5000─┘\n                                    │\n                                    │\n       ┌──────────┐                 │\n       │  Addons  ├────┐            ▼\n       └──────────┘    │    ┌localhost:5000─┐     ┌──────────────┐\n       ┌──────────┐    └───▶│               │     │              │\n       │functions ├────────▶│    Netlify    │     │   Browser    │\n       └──────────┘    ┌───▶│      Dev      │     │              │\n       ┌──────────┐    │    │               │     │              │\n       │_redirects│────┘    └──localhost:8888───▶ localhost:8888─┘\n       └──────────┘\n\n\nWith project detectors, it automatically detects common tools like Gatsby, Hugo, React Static, Eleventy, and more, to give a zero\nconfig setup for your local dev server and can help scaffolding new functions as you work on them. Read our blogpost for more on\ndetectors and how you can contribute\n[https://www.netlify.com/blog/2019/04/24/zero-config-yet-technology-agnostic-how-netlify-dev-detectors-work/]!\n\n#PREREQUISITESPREREQUISITES\n * You should have the latest Netlify CLI version. Run npm install -g netlify-cli to be sure.\n * You should be logged in on Netlify CLI [https://www.netlify.com/docs/cli/#authentication]\n * Your project should be linked to a siteID on Netlify (using netlify init\n   [https://www.netlify.com/docs/cli/#continuous-deployment] or netlify link\n   [https://www.netlify.com/docs/cli/#linking-and-unlinking-sites]). You can confirm this has been done if you have a .netlify \n   folder with a state.json file containing your siteID.\n\nThis is how we pull down your build environment variables and manage your addons on your local machine.\n\n#USAGEUSAGE\n * netlify dev start a local dev server for the build tool you're using\n * netlify dev:exec <command> runs a shell command within the netlify dev environment\n * netlify functions:create bootstrap a new function\n\nPro tip: Aliasing commandsAs these commands are expected to be frequently used, it may be helpful to define aliases in your\nterminal (Mac: bash [https://jonsuh.com/blog/bash-command-line-shortcuts/], zsh\n[https://askubuntu.com/questions/758496/how-to-make-a-permanent-alias-in-oh-my-zsh], Windows: doskey\n[https://stackoverflow.com/questions/20530996/aliases-in-windows-command-prompt], registry\n[https://stackoverflow.com/questions/20530996/aliases-in-windows-command-prompt]) to your personal preference. For example:\n\n## ~/.zshrc\nalias ndeploy=\"netlify deploy --prod\"\nalias nd=\"netlify dev\"\nalias ndl=\"netlify dev --live\"\nalias nfc=\"netlify functions:create\"\nalias ndx=\"netlify dev:exec \"\n\n#NETLIFY-DEV-USAGENETLIFY DEV USAGE\nUSAGE\n  $ netlify dev\n\nOPTIONS\n  -c, --command=command      command to run\n  -f, --functions=functions  Specify a functions folder to serve\n  -o, --offline              disables any features that require network access\n  -p, --port=port            Specify port of netlify dev\n  -l, --live                 Start a public live session\n\nDESCRIPTION\n  The dev command will run a local dev server with Netlify's Edge Logic proxies and redirects, serverless functions, and addons\n\nEXAMPLES\n  $ netlify dev\n  $ netlify dev -c \"yarn start\"\n  $ netlify dev -c hugo\n\nCOMMANDS\n  dev:exec  Exec command\n\n#LIVE-SHARELIVE SHARE\nTo share your ongoing dev session with a coworker, just run Netlify Dev with a --live flag:\n\nnetlify dev --live\n\nYou will get a URL that looks like https://clever-cray-2aa156-6639f3.netlify.live/. This can be accessed by anyone as long as you\nkeep your session open.\n\n> Note: there are currently known issues with ending the live session alongside your webdevserver, as well as with live reloading.\nWe are working on fixing it, and would appreciate repro cases, or you may check existing issues with the --live tag\n[https://github.com/netlify/netlify-dev-plugin/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A--live]. In the mean time\nyou can run ps aux | grep live-tunnel and kill these sessions manually.\n\n\n#NETLIFYTOML-DEV-BLOCKNETLIFY.TOML [DEV] BLOCK\nNetlify Dev is meant to work with zero config for the majority of users, by using its detector system. However you may wish to\nassert more control over its behavior, and should make use of the new [dev] block in netlify.toml to do so:\n\n# sample netlify.toml\n[build]\n  command = \"yarn run build\"\n  functions = \"functions\" # netlify dev uses this to know where to scaffold and serve your functions\n  publish = \"dist\"\n\n# note: each of these fields are OPTIONAL\n[dev]\n  command = \"yarn start\" # Command to start your dev server\n  port = 3000 # Port that the dev server will be listening on\n  functionsPort = 34567 # port for functions server\n  targetPort = 3000 # Port of target app server\n  publish = \"dist\" # If you use a _redirect file, provide the path to your static content folder\n  jwtRolePath = \"app_metadata.authorization.roles\" # Object path we should look for role values for JWT based redirects\n\n#PROJECT-DETECTIONPROJECT DETECTION\nNetlify Dev will attempt to detect the SSG or build command that you are using, and run these on your behalf, while adding other\ndevelopment utilities. If you have a JavaScript project, it looks for the best package.json script to run for you, using simple\nheuristics, so you can use the full flexibility of npm scripts. We may add more intelligence to this in future.\n\nOverriding the detectors: The number of project types which Netlify Dev can detect\n[https://github.com/netlify/netlify-dev-plugin/tree/master/src/detectors] is growing, but if yours is not yet supported\n(contributions welcome!), you can instruct Netlify Dev to run the project on your behalf by declaring it in a [dev] block of your \nnetlify.toml file.\n\n# sample dev block in the toml\n# note: each of these fields are OPTIONAL and should only be used if you need an override\n[dev]\n  command = \"yarn start\" # Command to start your dev server\n  port = 3000 # Port that the dev server will be listening on\n  functionsPort = 34567 # port for functions server\n  publish = \"dist\" # If you use a _redirect file, provide the path to your static content folder\n\nExplanation of ports in Netlify DevThere will be a number of ports that you will encounter when using Netlify Dev, especially when\nrunning a static site generator like Gatsby which has its own dev server. All the port numbers can be a bit confusing, so here is\na brief explainer.\n\n * If your SSG has a devserver on port 8000 for example, Netlify Dev needs to be told to proxy that port so it can merge it in\n   with the rest of the local Netlify environment (say, running on port 8888), which is what you want to get the full Netlify Dev\n   experience with Functions, Redirects, and so on.\n * If you're running a project we have a detector for, we hardcode those conventional ports so you don't have to supply it\n   yourself. If we have multiple detectors that match, we'll ask you to choose.\n * However, sometimes you're using some other project (we welcome contributions for detectors!) or just have a custom port you\n   want Netlify Dev to point to for some reason. This is when you go to the netlify.toml [dev] block to specify exactly what port\n   we should listen to.\n\nAs for which port to use while doing local development in Netlify Dev, always look for this box in your console output and use\nthat:\n\n   ┌──────────────────────────────────────────────────────────────┐\n   │                                                              │\n   │   [Netlify Dev] Server now ready on http://localhost:64939   │\n   │                                                              │\n   └──────────────────────────────────────────────────────────────┘\n\n#REDIRECTSREDIRECTS\nNetlify Dev has the ability emulate the redirect capability [https://www.netlify.com/docs/redirects/] Netlify provide on the ADN\n[https://netlify.com/features/adn] in your local environment. The same redirect rules which you configure to run on the edge, will\nalso work in your local builds.\n\nNetlify dev supports redirect rules defined in either _redirects or netlify.toml files.\n\nThe order of precedence for applying redirect rules is:\n\n 1. _redirects file (in the project's publish folder)\n 2. netlify.toml file (in the project's publish folder)\n 3. netlify.toml file (in the project's root folder)\n\nSee the Redirects Documentation [https://www.netlify.com/docs/redirects/] for more information on Netlify's redirect and proxying\ncapabilities.\n\n#NETLIFY-FUNCTIONSNETLIFY FUNCTIONS\nNetlify can also create serverless functions for you locally as part of Netlify Functions. The serverless functions can then be\nrun by Netlify Dev in the same way that wold be when deployed to the cloud.\n\n## list of major functionality\nnetlify functions:list\nnetlify functions:create\nnetlify functions:invoke\n\n\nA number of function templates are available to get you started, and you can add your own utility functions to suit your own\nproject development needs. You can also locally invoke them with test payload data.\n\nCreate a new function\n\n$ netlify functions:create\n\nImportant note: Your functions will likely have node_modules in each folder. These are usually gitignored. You can write bash\nscripts to install them for production, or use the lightweight netlify-lambda install\n[https://github.com/netlify/netlify-lambda/blob/master/README.md#netlify-lambda-install] CLI to do it for you.\n\nMore detailed usage examples # Create a new function from one of the\n# available templates offered when prompted (see below)\n$ netlify functions:create\n\n# alternatives\n$ netlify functions:create hello-world # Create a new function with a given name\n$ netlify functions:create --name hello-world # same\n\n# Create a new function by cloning a template from a remote url\n# organised with dependencies installed into a subdirectory\n$ netlify functions:create hello-world --url https://github.com/netlify-labs/all-the-functions/tree/master/functions/9-using-middleware\n\nDeploying unbundled function folders\n\nFunctions that have node_modules inside their own folders require these node_modules to be installed when deployed. For the time\nbeing, the Netlify build process does not recursively install dependencies for your function folders yet. You can write prebuild \nor postinstall bash scripts to install them for production, or use the lightweight netlify-lambda install\n[https://github.com/netlify/netlify-lambda/blob/master/README.md#netlify-lambda-install] CLI to do it for you.\n\nWriting your own Function Templates\n\nFunction templates can specify addons that they rely on as well as execute arbitrary code after installation in an onComplete \nhook, if a special .netlify-function-template.js file exists in the directory:\n\n// .netlify-function-template.js\nmodule.exports = {\n  addons: [\n    {\n      addonName: 'fauna',\n      addonDidInstall: () => {} // post install function to run after installing addon, eg. for setting up schema\n    }\n  ],\n  onComplete() {\n    console.log(`custom-template function created from template!`)\n  }\n}\n\nInstead of using our basic templates, you can use your own by passing it with a --url flag: netlify functions:create hello-world\n--url https://github.com/netlify-labs/all-the-functions/tree/master/functions/9-using-middleware, specifying any addons and\npostinstall/complete steps as shown above.\n\n#LOCALLY-TESTING-FUNCTIONS-WITH-NETLIFY-FUNCTIONSINVOKELOCALLY TESTING FUNCTIONS WITH NETLIFY FUNCTIONS:INVOKE\nnetlify functions:invoke allows you to locally test functions going above and beyond a simple GET request in browser. (we only\nmodel POSTs now but could easily expand from here).\n\nIf you have Netlify Dev running your functions, you can then test sending payloads of data, or authentication payloads:\n\n# with prompting\nnetlify functions:invoke # we will prompt you at each step\nnetlify functions:invoke myfunction # invoke a specific function\nnetlify functions:invoke --name myfunction # invoke a specific function\n\n# no prompting (good for CI)\nnetlify functions:invoke --name myfunction --identity # invoke a specific function with netlify identity headers\nnetlify functions:invoke --name myfunction --no-identity # invoke a specific function without netlify identity headers\n\n# sending payloads\nnetlify functions:invoke myfunction --payload '{\"foo\": 1}'\nnetlify functions:invoke myfunction --querystring \"foo=1\"\nnetlify functions:invoke myfunction --payload \"./pathTo.json\"\n\nThere are special cases for event triggered functions\n[https://www.netlify.com/docs/functions/?utm_source=blog&utm_medium=netlifydev&utm_campaign=devex#event-triggered-functions] (eg \nidentity-signup) which will also give you mock data for testing. This makes manual local testing of event triggered functions\npossible, which drastically improves the development experience.\n\nThis is a new feature; ideas and feedback and issues and PR's welcome!\n\n#FUNCTION-BUILDERS-FUNCTION-BUILDER-DETECTION-AND-RELATIONSHIP-WITH-NETLIFY-LAMBDAFUNCTION BUILDERS, FUNCTION BUILDER DETECTION,\nAND RELATIONSHIP WITH NETLIFY-LAMBDA\nExisting users of netlify-lambda should have no change to their workflow by switching to netlify dev. One immediate benefit is no\nneed for proxying [https://github.com/netlify/netlify-lambda#proxying-for-local-development] since Netlify Dev does that for you.\n\nWhy Function Builders\n\nNotice that all the functions created by netlify functions:create require no build step. This is intentional: we want to remain\nagnostic of build tooling and thereby create clear expectations: You give us a folder of functions, and we simply serve it (This\nis called zip-it-and-ship-it [https://github.com/netlify/zip-it-and-ship-it]). If you want to build that folder from a separate\nsource folder, that is entirely under your control. Use whatever tool you like.\n\nThis can be helpful, for example, to use ES modules syntax (e.g. import/export) via webpack, babel transforms via babel-cli or \nbabel-loader, or strict type-checking and transpilation with TypeScript's tsc or other webpack loaders.\n\nWe'll call this category of tools function builders. In fact, we do maintain an open source function builder dedicated to the task\nof transforming serverless functions from source to destination via webpack, called netlify-lambda\n[https://github.com/netlify/netlify-lambda]. We maintain a comparison between Netlify Dev and netlify-lambda on its README as well\nas advice on when to use which or both [https://github.com/netlify/netlify-lambda#netlify-lambda].\n\nFunction Builder Detection\n\nWe don't expect everyone to use function builders, but we expect many will, and want to provide helpful defaults that \"just work\"\nfor this. To do that, we use a similar detection concept to project detectors, and look for common function builder setups.\n\nWith this feature, pre-Netlify Dev projects like netlify/create-react-app-lambda\n[https://github.com/netlify/create-react-app-lambda] can immediately use the netlify dev command with no change to code.\nCurrently, we only offer detection for scripts with netlify-lambda build $SRCFOLDER. More ideas are welcome.\n\nNetlify Dev will watch netlify-lambda's source folder and rebuild whenever the source file changes, eliminating the need for \nnetlify-lambda serve since we dont want a duplicate functions server.\n\nBring Your Own Function Builder\n\nWe may offer detection for more function builders in future, and also let you specify function build commands in the netlify.toml \n[dev] block. Please share your usecase with us if you are likely to need this.\n\n#USING-ADD-ONSUSING ADD-ONS\nAdd-ons are a way for Netlify users to extend the functionality of their Jamstack site/app.\n\nCheck out Add-on docs [https://www.netlify.com/docs/partner-add-ons/] here.\n\nTo try out an add-on with Netlify dev, run the netlify addons:create command:\n\nnetlify addons:create fauna\n\nThe above command will install the FaunaDB add-on and provision a noSQL database for your site to leverage. The FaunaDB add-on\ninjects environment variables into your site's build process and the serverless functions.\n\nOr install this one click example [https://github.com/netlify/fauna-one-click].\n\nAfter you have installed an add-on, it will be visible with the netlify addons:list command inside your site's current working\ndirectory. You can use netlify addons:delete $ADDONNAME to delete your addon instance.\n\nFor now, it is important to include instructions to create addons for each member of your team, as there is no way to specify\naddons inside of netlify.toml. We are working on this.\n\n#CONTRIBUTINGLOCAL-DEVELOPMENTCONTRIBUTING/LOCAL DEVELOPMENT\nThanks for contributing! You'll need to follow these steps to run Netlify CLI and netlify-dev-plugin locally:\n\n 1. uninstall any globally installed versions of netlify-cli\n 2. clone and install deps for netlify/cli [https://github.com/netlify/cli]\n 3. npm link from inside the cli folder\n 4. clone and install deps for this repo\n 5. inside the netlify-dev-plugin folder, run yarn link\n 6. inside the cli folder, run yarn link \"netlify-dev-plugin\"\n\nNow you're both ready to start testing netlify dev and to contribute to the project! Note these are untested instructions, please\nget in touch if you're unable to follow them clearly and we'll work with you. Or ping @swyx [https://twitter.com/swyx].\n\nNote that code that you may be debugging or investigating may be in some transitive dependencies we have published as separate\nlibraries:\n\n * netlify/netlify-rules-proxy [https://github.com/netlify/netlify-rules-proxy/] (npm\n   [https://www.npmjs.com/package/@netlify/rules-proxy])\n * netlify/node-redirects-parser [https://github.com/netlify/node-redirects-parser] (npm\n   [https://www.npmjs.com/package/netlify-redirect-parser])\n * (not open source) npmjs.com/package/netlify-redirector [https://www.npmjs.com/package/netlify-redirector]",
  "/page-two.html": " NETLIFY BUILD\n[/netlify/build/raw/master/static/logo.png] [/netlify/build/blob/master/static/logo.png]\n\n\nCoverage Status\n[https://camo.githubusercontent.com/893f6e2d7366d023d46dfef988eb934e269f863d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e65746c6966792f6275696c642f62616467652e737667]\n[https://coveralls.io/github/netlify/build]Build [https://github.com/netlify/build/workflows/Build/badge.svg]\n[https://github.com/netlify/build/actions]\n\nNetlify build is the next generation of CI/CD tooling for modern web applications.\n\nSign up for the private beta [https://www.netlify.com/build/plugins-beta/]\n\nDemo video [https://www.youtube.com/watch?v=4m6Hi4_qEVE] andslides\n[https://docs.google.com/presentation/d/1zNcHHrJWnEp6Y-NDk9RE6g9GYCUjI-kdgYW28G2GkSA/edit?usp=sharing]. See alsoexample guide here\nin Creating and using your first Netlify Build Plugin\n[https://www.netlify.com/blog/2019/10/16/creating-and-using-your-first-netlify-build-plugin/].\n\nExpand Table of Contents * How it works\n * 1. Extending via config\n * 2. Extending via plugins\n * Lifecycle\n * lifecycle.init\n * lifecycle.getCache\n * lifecycle.install\n * lifecycle.preBuild\n * lifecycle.functionsBuild\n * lifecycle.build\n * lifecycle.postBuild\n * lifecycle.package\n * lifecycle.preDeploy\n * lifecycle.saveCache\n * lifecycle.finally\n * Configuration\n * Plugins\n * What can plugins do?\n * CLI commands\n * Contributors\n\n#BACKGROUNDBACKGROUND\nDuring a site build, there are a variety of things happening under the hood.\n\nThis is a simplified view of a typical build life cycle:\n\n 1. Netlify clones your repo & looks for diffs\n 2. Dependencies are install in the project\n 3. We run your build command\n 4. Files & dependencies are cached\n 5. Finally, your site is deployed to the web!\n\nHistorically, when connecting your site to Netlify, we ask for the build command (step 3 above) and will run through this process.\nThis works great for most use cases & will continue to do so 😃\n\nFor builds that require a little more flexibility, we are introducing a programatic interface on top of these build lifecycle\nsteps to allow users to customize this flow.\n\nNetlify Build is designed to support any kind of build flow and is extendable to fit any unique project requirements.\n\n#HOW-IT-WORKSHOW IT WORKS\nBuilds are controlled by a series of lifecycle events that plugins & configuration hook into.\n\nThe build lifecycle can be extended in two ways:\n\n 1. Adding lifecycle steps to build.lifecycle in your config file\n 2. Installing pre-packaged plugins\n\n#1-EXTENDING-VIA-CONFIG1. EXTENDING VIA CONFIG\nInside the netlify config file, you can attach lifecycle commands to a new property build.lifecycle.\n\nbuild:\n  publish: my-dist-folder\n  # Run this lifecycle during build\n  lifecycle:\n    init:\n      - npm run thing\n      - echo \"much wow\"\n    preBuild: curl download-static-content\n    build: npm run build\n    postBuild:\n      - npx generate-sitemap\n\n#2-EXTENDING-VIA-PLUGINS2. EXTENDING VIA PLUGINS\nNetlify Plugins are installable packages that extend the functionality of the netlify build process.\n\nThey can be installed from npm or run locally from relative path in your project.\n\n# Config file `plugins` defines plugins used by build.\nplugins:\n  - type: ./local/path/to/plugin-folder\n    config:\n      optionOne: 'hello'\n      optionTwo: 'there'\n - type: plugin-from-npm\n   config:\n     optionOne: 'neat'\n     arrayOfValues:\n      - david@netlify.com\n      - jim@netlify.com\n\nNetlify plugins can be found on npm bysearching for keywords:netlify-plugin\n[https://www.npmjs.com/search?q=keywords%3Anetlify-plugin].\n\n#LIFECYCLELIFECYCLE\nThe build process runs through a series of lifecycle events. These events are the places we can hook into and extend how the\nNetlify build operates.\n\nLifecycle hookDescription⇩ ‏‏‎ ‏‏‎ ‏‏‎ init ‏‏‎ ‏‏‎ ‏‏‎Runs before anything else⇩ ‏‏‎ ‏‏‎ ‏‏‎ getCache ‏‏‎ ‏‏‎ ‏‏‎Fetch previous\nbuild cache⇩ ‏‏‎ ‏‏‎ ‏‏‎ install ‏‏‎ ‏‏‎ ‏‏‎Install project dependencies⇩ ‏‏‎ ‏‏‎ ‏‏‎ preBuild ‏‏‎ ‏‏‎ ‏‏‎Runs before functions &\nbuild commands run⇩ ‏‏‎ ‏‏‎ ‏‏‎ functionsBuild ‏‏‎ ‏‏‎ ‏‏‎Build the serverless functions⇩ ‏‏‎ ‏‏‎ ‏‏‎ build ‏‏‎ ‏‏‎ ‏‏‎Build\ncommands are executed⇩ ‏‏‎ ‏‏‎ ‏‏‎ postBuild ‏‏‎ ‏‏‎ ‏‏‎Runs after site & functions have been built⇩ ‏‏‎ ‏‏‎ ‏‏‎ package ‏‏‎ ‏‏‎\n‏‏‎Package & optimize artifact⇩ ‏‏‎ ‏‏‎ ‏‏‎ preDeploy ‏‏‎ ‏‏‎ ‏‏‎Runs before built artifacts are deployed⇩ ‏‏‎ ‏‏‎ ‏‏‎ saveCache \n‏‏‎ ‏‏‎ ‏‏‎Save cached assets🎉 ‏‏‎ finally ‏‏‎ ‏‏‎ ‏‏‎Runs after anything elseThe Lifecycle flows the events in order and\nexecutes and their pre & post counterparts.\n\npre happens before a specific event.\n\npost happens after a specific event.\n\n      ┌───────────────┬────────────────┬──────────────────┐\n      │      pre      │     event      │       post       │\n      ├───────────────┼────────────────┼──────────────────┤\n      │               │                │                  │\n      │               │                │                  │\n...   │   preBuild    │     build      │    postBuild     │   ...\n      │               │                │                  │\n      │               │                │                  │\n      └───────────────┤                ├──────────────────┘\n                      └────────────────┘\n\n      ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ▶\n\n                        event flow\n\n\n#LIFECYCLEINITLIFECYCLE.INIT\ninit - Runs before anything else\n\nUsing init \n1. Using with a Plugin\n\nBelow is an example plugin using the init hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    init: () => {\n      console.log('Do thing on init step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    init:\n      - echo \"Do thing on init step\"\n\n#LIFECYCLEGETCACHELIFECYCLE.GETCACHE\ngetCache - Fetch previous build cache\n\nUsing getCache \n1. Using with a Plugin\n\nBelow is an example plugin using the getCache hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    getCache: () => {\n      console.log('Do thing on getCache step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    getCache:\n      - echo \"Do thing on getCache step\"\n\n#LIFECYCLEINSTALLLIFECYCLE.INSTALL\ninstall - Install project dependencies\n\nUsing install \n1. Using with a Plugin\n\nBelow is an example plugin using the install hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    install: () => {\n      console.log('Do thing on install step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    install:\n      - echo \"Do thing on install step\"\n\n#LIFECYCLEPREBUILDLIFECYCLE.PREBUILD\npreBuild - Runs before functions & build commands run\n\nUsing preBuild \n1. Using with a Plugin\n\nBelow is an example plugin using the preBuild hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    preBuild: () => {\n      console.log('Do thing on preBuild step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    preBuild:\n      - echo \"Do thing on preBuild step\"\n\n#LIFECYCLEFUNCTIONSBUILDLIFECYCLE.FUNCTIONSBUILD\nfunctionsBuild - Build the serverless functions\n\nUsing functionsBuild \n1. Using with a Plugin\n\nBelow is an example plugin using the functionsBuild hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    functionsBuild: () => {\n      console.log('Do thing on functionsBuild step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    functionsBuild:\n      - echo \"Do thing on functionsBuild step\"\n\n#LIFECYCLEBUILDLIFECYCLE.BUILD\nbuild - Build commands are executed\n\nUsing build \n1. Using with a Plugin\n\nBelow is an example plugin using the build hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    build: () => {\n      console.log('Do thing on build step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    build:\n      - echo \"Do thing on build step\"\n\n#LIFECYCLEPOSTBUILDLIFECYCLE.POSTBUILD\npostBuild - Runs after site & functions have been built\n\nUsing postBuild \n1. Using with a Plugin\n\nBelow is an example plugin using the postBuild hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    postBuild: () => {\n      console.log('Do thing on postBuild step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    postBuild:\n      - echo \"Do thing on postBuild step\"\n\n#LIFECYCLEPACKAGELIFECYCLE.PACKAGE\npackage - Package & optimize artifact\n\nUsing package \n1. Using with a Plugin\n\nBelow is an example plugin using the package hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    package: () => {\n      console.log('Do thing on package step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    package:\n      - echo \"Do thing on package step\"\n\n#LIFECYCLEPREDEPLOYLIFECYCLE.PREDEPLOY\npreDeploy - Runs before built artifacts are deployed\n\nUsing preDeploy \n1. Using with a Plugin\n\nBelow is an example plugin using the preDeploy hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    preDeploy: () => {\n      console.log('Do thing on preDeploy step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    preDeploy:\n      - echo \"Do thing on preDeploy step\"\n\n#LIFECYCLESAVECACHELIFECYCLE.SAVECACHE\nsaveCache - Save cached assets\n\nUsing saveCache \n1. Using with a Plugin\n\nBelow is an example plugin using the saveCache hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    saveCache: () => {\n      console.log('Do thing on saveCache step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    saveCache:\n      - echo \"Do thing on saveCache step\"\n\n#LIFECYCLEFINALLYLIFECYCLE.FINALLY\nfinally - Runs after anything else\n\nUsing finally \n1. Using with a Plugin\n\nBelow is an example plugin using the finally hook\n\nmodule.exports = function myPlugin(pluginConfig) {\n  return {\n    finally: () => {\n      console.log('Do thing on finally step')\n    },\n  }\n}\n\nAfter creating the plugin, add into your Netlify config file under plugins\n\nplugins:\n  - type: ./path/to/plugin\n    config:\n      foo: bar\n\n2. Using with via build.lifecycle\n\nbuild:\n  lifecycle:\n    finally:\n      - echo \"Do thing on finally step\"\n\n#CONFIGURATIONCONFIGURATION\nConfiguration can be written in toml, yml, json, or json5.\n\nExample:\n\n# Config file `plugins` defines plugins used by build. Plugins are optional\nplugins:\n  - type: ./local/path/to/plugin-folder\n    config:\n      optionOne: 'hello'\n      optionTwo: 'there'\n  - type: plugin-from-npm\n    config:\n      optionOne: 'neat'\n      arrayOfValues:\n        - david@netlify.com\n        - jim@netlify.com\n\n# Inline `build.lifecycle` steps can be defined\nbuild:\n  lifecycle:\n    init:\n      - npm run foo\n      - export VALUE=lol\n      - echo \"much wow\"\n    getCache:\n      - echo 'curl custom cache'\n    preBuild: echo \"${env:privateKey}\"\n    build: |\n      echo 'Hello Netlify Build!'\n      npm run build\n\nConfiguration now supports environment variables & secrets.\n\nTo reference an environment variable in Netlify config:\n\nfoo: ${env:MY_ENV_VAR}\n\n#PLUGINSPLUGINS\nNetlify Plugins extend the functionality of the netlify build process.\n\nPlugins are POJOs (plain old JavaScript objects) that allow users to hook into the different lifecycle steps happening during\ntheir site builds.\n\nFor example, hooking into the preBuild step to run something before your build command. Or the postBuild hook for running things\nafter your site build has completed.\n\n{\n  name: 'netlify-plugin-awesome',\n  init: () => { /* Run custom logic at beginning of build */ }\n  preBuild: () => { /* Run custom logic before build happens */ },\n  finally: () => { /* Run custom logic at the end of the build */ }\n  // ... etc\n}\n\nHere is an example:\n\n/* file ./plugins/my-plugin/index.js */\nmodule.exports = function exampleOne(config) {\n  // do initial things with plugin 'config'\n  return {\n    name: 'netlify-plugin-awesome',\n    init: () => {\n      console.log('Run custom logic at beginning of build')\n    },\n    preBuild: () => {\n      console.log('Run custom logic before build happens')\n    },\n    postBuild: () => {\n      console.log('Run custom logic after build happens')\n    },\n    finally: () => {\n      console.log('Run custom logic at the end of the build')\n    },\n  }\n}\n\nTo use this plugin, define the plugins key in your Netlify config file.\n\nbuild:\n  functions: src/functions\n  publish: build\n  command: npm run build\n\n# Netlify build plugins\nplugins:\n  # Path to plugin. Can be local relative path or reference to node_modules\n  - type: ./plugins/my-plugin/\n    config:\n      a: hello\n      b: goodbye\n\n#WHAT-CAN-PLUGINS-DOWHAT CAN PLUGINS DO?\nPlugins can do a-lot and we are excited what the JAMstack community will build!\n\nHere are some examples:\n\n * @netlify/plugin-lighthouse to automatically track your lighthouse site score between deployments\n * @netlify/plugin-sitemap to generate sitemaps after build\n * @netlify/plugin-notify to automatically wired up build notifications\n * @netlify/plugin-no-more-404 fail build or warn if prior .html files disappear without corresponding Netlify redirects.\n * @netlify/plugin-axe to automatically audit site for accessibility issues\n * @netlify/plugin-encrypted-files to encrypt files in source, but to decrypt them locally and for the build, so that you can do \n   partial open source sites without leaking announcements or private info.\n * @netlify/plugin-twiliosms text your boss every time you deploy so they know you're working -example guide here in Creating and\n   using your first Netlify Build Plugin\n   [https://www.netlify.com/blog/2019/10/16/creating-and-using-your-first-netlify-build-plugin/]\n * @netlify/plugin-svgoptimizer to automatically optimize all SVGs in a directory when the site is built\n * netlify-plugin-cypress to automatically run integration tests\n * netlify-plugin-tweet-new-post to automatically share new content via twitter on new publish\n * ... the sky is the limit 🌈\n\n#CLI-COMMANDSCLI COMMANDS\nLike Netlify dev [https://www.netlify.com/products/dev/], Netlify build runs locally and in the remote CI context\n\nTo execute your build locally, run the following CLI command:\n\nnetlify build\n\n\nIt's also possible to \"try before you buy\" and test out the build flow before executing any code with the dry run flag.\n\nThe --dry flag will output everything that happens in the build flow without executing the plugin lifecycle methods.\n\nTo execute a test run of the build locally, run the following CLI command:\n\nnetlify build --dry\n\n\n#CONTRIBUTORSCONTRIBUTORS\nThanks for contributing!\n\nPlease see CONTRIBUTING.md [/netlify/build/blob/master/CONTRIBUTING.md] for instructions on how to set up and work on this repo\nitself."
}
